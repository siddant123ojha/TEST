import cv2
import matplotlib.pyplot as plt

# Load the cascades for face and eye detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')

# Start video capture
cap = cv2.VideoCapture(0)

saved_frame = None  # To store a frame with detections

while True:
    ret, frame = cap.read()
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    
    # Detect faces
    faces = face_cascade.detectMultiScale(gray, 1.1, 4)
    
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)
        roi_gray = gray[y:y + h, x:x + w]
        roi_color = frame[y:y + h, x:x + w]
        
        # Detect eyes within the face region
        eyes = eye_cascade.detectMultiScale(roi_gray, 1.1, 10)
        for (ex, ey, ew, eh) in eyes:
            cv2.rectangle(roi_color, (ex, ey), (ex + ew, ey + eh), (0, 255, 0), 2)
    
    # Display the output
    cv2.imshow('Face and Eye Detection', frame)
    
    # Save the first frame with detections
    if saved_frame is None and len(faces) > 0:
        saved_frame = frame.copy()
        cv2.imwrite("detected_frame.jpg", saved_frame)
    
    # Exit loop on 'q' key press
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
cap.release()
cv2.destroyAllWindows()

# Plot the saved image using Matplotlib
if saved_frame is not None:
    # Read the saved image
    img = cv2.imread("detected_frame.jpg")
    img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # Convert to RGB for Matplotlib
    
    # Plot the image
    plt.imshow(img_rgb)
    plt.axis("off")
    plt.title("Detected Features")
    plt.show()
else:
    print("No frame was saved as no faces were detected.")
